<html><head><title>net</title><link rel="Stylesheet" type="text/css" href="DocStyle.css" /></head><body><div><H1><a name="IOCPPool">IOCPPool</a>
</H1><hr /><P>异步IO类。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor)</td><td>析构函数。</td></tr><tr><td>activate</td><td>启动worker线程。</td></tr><tr><td>reqexit</td><td>请求worker线程退出。一般在所有的对话关闭后调用。</td></tr><tr><td>svc_add</td><td>添加对话。</td></tr><tr><td>svc_del</td><td>删除对话。</td></tr><tr><td>DisconnectAll</td><td>断开所有已连接的对话。</td></tr><tr><td>wait_for_all_session_exit</td><td>等待所有的对话关闭。</td></tr></tbody></table><br /><H1><a name="IPAddress">IPAddress</a>
</H1><hr /><P>IP地址描述类。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>service</td><td>指定IP地址和端口。</td></tr><tr><td>host</td><td>取得主机名。</td></tr><tr><td>port</td><td>取得端口号。</td></tr><tr><td>swap</td><td>交换两个地址。</td></tr></tbody></table><br /><H1><a name="Session">Session</a>
</H1><hr /><P>异步IO的对话类。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor)</td><td>析构函数。</td></tr><tr><td>OnConnected (virtual)</td><td>在对话建立连接时被调用。对SessionUDP，在成功Bind后调用。 对SessionClient，在成功Connecct后调用，对SessionServer，在成功Listen后调用。</td></tr><tr><td>OnDisconnected (virtual)</td><td>在对话被断开时调用。</td></tr><tr><td>OnSendCompleted (virtual)</td><td>异步发送完成时被调用。一个异步发送请求，对应一个OnSendCompleted。</td></tr><tr><td>OnRecvCompleted (virtual)</td><td>异步接收完成时被调用。一个异步接收请求，对应一个OnSendCompleted。</td></tr><tr><td>OnSendReady (virtual)</td><td>在调用WaitForSend后发送就绪时被调用。</td></tr><tr><td>OnRecvReady (virtual)</td><td>在调用WaitForRecv后，接收就绪时被调用。</td></tr><tr><td>SetIOCP</td><td>关联异步IO控制器。</td></tr><tr><td>Disconnect (virtual)</td><td>断开连接。</td></tr></tbody></table><br /><H1><a name="SessionClient">SessionClient</a>
</H1><hr /><P>TCP协议的客户端对话类。调用Connect函数成功连接后，认为是Connected。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor) (virtual)</td><td>析构函数。</td></tr><tr><td>Connect</td><td>尝试连接到服务器。</td></tr><tr><td>OnConnected (virtual)</td><td>在对话建立连接时被调用。对SessionUDP，在成功Bind后调用。 对SessionClient，在成功Connecct后调用，对SessionServer，在成功Listen后调用。</td></tr><tr><td>OnDisconnected (virtual)</td><td>在对话被断开时调用。</td></tr><tr><td>AsyncSend</td><td>异步发送。在发送完成或出错时会调用 OnSendCompleted。</td></tr><tr><td>AsyncRecv</td><td>异步接收。在接收完成或出错时，会调用 OnRecvCompleted。</td></tr><tr><td>WaitForSend</td><td>等待发送就绪。当发送就绪时，会调用OnSendReady。</td></tr><tr><td>WaitForRecv</td><td>等待接收就绪。当接收就绪时，会调用OnRecvReady。</td></tr><tr><td>OnSendCompleted (virtual)</td><td>异步发送完成时被调用。一个异步发送请求，对应一个OnSendCompleted。</td></tr><tr><td>OnRecvCompleted (virtual)</td><td>异步接收完成时被调用。一个异步接收请求，对应一个OnSendCompleted。</td></tr><tr><td>OnSendReady (virtual)</td><td>在调用WaitForSend后发送就绪时被调用。</td></tr><tr><td>OnRecvReady (virtual)</td><td>在调用WaitForRecv后，接收就绪时被调用。</td></tr></tbody></table><br /><H1><a name="SessionServer">SessionServer</a>
</H1><hr /><P>TCP协议的服务器端对话类。仅用于接收新的连接请求，在绑定端口成功Listen后，认为是Connected，默认的OnConnected函数是调用WaitForAccept。 在接受新连接请求后，会调用NewSession这个函数，这个函数必须创建一个合适的Session来处理新的连接。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor) (virtual)</td><td>析构函数。</td></tr><tr><td>NewSession (virtual)</td><td>处理新连接，一般是使用指定的SOCKET创建一个新的对话，然后加入到IOCPPool中。</td></tr><tr><td>Listen</td><td>监听端口。</td></tr><tr><td>Close</td><td>关闭对话。</td></tr><tr><td>WaitForAccept</td><td>等待异步连接。在成功接受新连接后，会调用NewSession函数。</td></tr><tr><td>OnConnected (virtual)</td><td>在对话建立连接时被调用。对SessionUDP，在成功Bind后调用。 对SessionClient，在成功Connecct后调用，对SessionServer，在成功Listen后调用。</td></tr><tr><td>OnDisconnected (virtual)</td><td>在对话被断开时调用。</td></tr></tbody></table><br /><H1><a name="SessionTCP">SessionTCP</a>
</H1><hr /><P>TCP协议异步IO的对话类。有两种通信模式，第一种为 使用AsyncSend/OnSendCompleted 和 AsyncRecv/OnRecvCompleted接口进行通信，另一种为 使用WaitForSend/OnSendReady 和 WaitForRecv/OnRecvReady 接口进行通信。 这两种接口也可以但不建议混合使用。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor)</td><td>析构函数。</td></tr><tr><td>OnConnected (virtual)</td><td>在对话建立连接时被调用。对SessionUDP，在成功Bind后调用。 对SessionClient，在成功Connecct后调用，对SessionServer，在成功Listen后调用。</td></tr><tr><td>OnDisconnected (virtual)</td><td>在对话被断开时调用。</td></tr><tr><td>AsyncSend</td><td>异步发送。在发送完成或出错时会调用 OnSendCompleted。</td></tr><tr><td>AsyncRecv</td><td>异步接收。在接收完成或出错时，会调用 OnRecvCompleted。</td></tr><tr><td>WaitForSend</td><td>等待发送就绪。当发送就绪时，会调用OnSendReady。</td></tr><tr><td>WaitForRecv</td><td>等待接收就绪。当接收就绪时，会调用OnRecvReady。</td></tr><tr><td>OnSendCompleted (virtual)</td><td>异步发送完成时被调用。一个异步发送请求，对应一个OnSendCompleted。</td></tr><tr><td>OnRecvCompleted (virtual)</td><td>异步接收完成时被调用。一个异步接收请求，对应一个OnSendCompleted。</td></tr><tr><td>OnSendReady (virtual)</td><td>在调用WaitForSend后发送就绪时被调用。</td></tr><tr><td>OnRecvReady (virtual)</td><td>在调用WaitForRecv后，接收就绪时被调用。</td></tr></tbody></table><br /><H1><a name="SessionUDP">SessionUDP</a>
</H1><hr /><P>UDP协议的异步IO的对话类。使用AsyncSend/OnSendCompleted 和 AsyncRecv/OnRecvCompleted接口进行通信。 SessionUDP不区分服务器端或客户端，在执行Bind之后，就认为是Connected，这时的OnConnected函数，服务器端第一个动作是调用AsyncRecv，而客户端第一个动作是调用AsyncSend。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor)</td><td>析构函数。</td></tr><tr><td>OnConnected (virtual)</td><td>在对话建立连接时被调用。对SessionUDP，在成功Bind后调用。 对SessionClient，在成功Connecct后调用，对SessionServer，在成功Listen后调用。</td></tr><tr><td>OnDisconnected (virtual)</td><td>在对话被断开时调用。</td></tr><tr><td>Bind</td><td>绑定本地地址，如果成功绑定，认为是成功连接。</td></tr><tr><td>AsyncSend</td><td>异步发送。在发送完成或出错时会调用 OnSendCompleted。</td></tr><tr><td>AsyncRecv</td><td>异步接收。在接收完成或出错时，会调用 OnRecvCompleted。</td></tr><tr><td>OnSendCompleted (virtual)</td><td>异步发送完成时被调用。一个异步发送请求，对应一个OnSendCompleted。</td></tr><tr><td>OnRecvCompleted (virtual)</td><td>异步接收完成时被调用。一个异步接收请求，对应一个OnSendCompleted。</td></tr></tbody></table><br /><H1><a name="Socket">Socket</a>
</H1><hr /><P>Socket类。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>Ensure</td><td>确保Socket是指定协议的，如果协议不一定，则重新创建指定协议的Socket。协议必须为Session::TCP或Session::UDP。</td></tr><tr><td>Listen</td><td>监听指定端口。</td></tr><tr><td>Accept</td><td>接受一个新的连接请求。</td></tr><tr><td>Connect</td><td>连接。</td></tr><tr><td>Recv</td><td>接收数据。</td></tr><tr><td>Send</td><td>发送数据。</td></tr><tr><td>Peek</td><td>查看有没有数据。</td></tr><tr><td>SendMsg</td><td>发送指定大小的数据并等待全部发送成功。</td></tr><tr><td>RecvMsg</td><td>接收指定大小的数据，并等待接收完成。</td></tr><tr><td>Bind</td><td>绑定端口。</td></tr><tr><td>IsConnected</td><td>判断是否已经连接。</td></tr><tr><td>GetPeerAddr</td><td>取得远程地址。</td></tr><tr><td>GetSockAddr</td><td>取得本地地址。</td></tr><tr><td>Shutdown</td><td>关闭读和写。</td></tr><tr><td>Close</td><td>关闭Socket。</td></tr><tr><td>Block</td><td>设置阻塞模式。</td></tr><tr><td>ReuseAddress</td><td>设置是否复用地址。</td></tr><tr><td>swap</td><td>交换两个Socket。</td></tr></tbody></table><br /></div></body></html>