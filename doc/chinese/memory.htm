<html><head><title>memory</title><link rel="Stylesheet" type="text/css" href="DocStyle.css" /></head><body><div><H1><a name="Allocator">Allocator</a>
</H1><hr /><P>可指定内存对齐量的内存分配器，也可以控制在分配的内存前面分配一个类型E的实例。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody></tbody></table><br /><H1><a name="AllocatorUsePool">AllocatorUsePool</a>
</H1><hr /><P>使用内存池的内存分配器。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody></tbody></table><br /><H1><a name="MemPoolDebug">MemPoolDebug</a>
</H1><hr /><P>Debug版的内存池，在分配的内存前面加上分配信息。配合宏MEM_DEBUG，可用来检测内存泄露等。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>allocate</td><td>内存分配函数。</td></tr><tr><td>deallocate</td><td>内存释放函数。</td></tr><tr><td>current (static)</td><td>取得当前的MemPoolDebug实例。</td></tr></tbody></table><br /><H1><a name="MemPoolMalloc">MemPoolMalloc</a>
</H1><hr /><P>使用malloc/free的内存池。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>allocate</td><td>内存分配函数。</td></tr><tr><td>deallocate</td><td>内存释放函数。</td></tr><tr><td>current (static)</td><td>取得当前的MemPoolMalloc实例。</td></tr></tbody></table><br /><H1><a name="MemPoolPaging">MemPoolPaging</a>
</H1><hr /><P>MemPoolPaging，使用内存页为基础的内存池，内部使用多个定长分配器。不同MemPoolPaging分配的内存可以交叉释放，由malloc分配的内存，也可以由MemPoolPaging释放。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>allocate</td><td>内存分配函数。</td></tr><tr><td>deallocate</td><td>内存释放函数。</td></tr><tr><td>current (static)</td><td>取得当前的MemPoolPaging实例。</td></tr></tbody></table><br /></div></body></html>