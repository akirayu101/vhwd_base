<html><head><title>basic</title><link rel="Stylesheet" type="text/css" href="DocStyle.css" /></head><body><div><H1><a name="AutoPtrT">AutoPtrT (template)</a>
</H1><hr /><P>AutoPtrT，持有内容，在析构时删掉指向的内容。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor)</td><td>析构函数。</td></tr><tr><td>reset</td><td>关联其他的指针。</td></tr><tr><td>get</td><td>取得关联的指针。</td></tr><tr><td>swap</td><td>交换与另一智能指针交换内容。</td></tr><tr><td>operator*</td><td>operator*算符，返回指向的内容的引用。</td></tr><tr><td>operator-></td><td>operator->，返回指针。</td></tr></tbody></table><br /><H1><a name="BitFlags">BitFlags</a>
</H1><hr /><P>bit标识类，一般情况下使用一个整数，用|或&之类位运行符进行操作，这里进行了封装，可用函数来设置或获取指定的标识位。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>clr</td><td>由一个整数来设置BitFlag。</td></tr><tr><td>set</td><td>设置指定的标识位。</td></tr><tr><td>get</td><td>取得指定的标识位。</td></tr><tr><td>add</td><td>把指定的标识位设置为真。</td></tr><tr><td>del</td><td>把指定的标识位设置为假。</td></tr><tr><td>inv</td><td>对指定的标识位取反。</td></tr><tr><td>val</td><td>取得内置的整数值。</td></tr></tbody></table><br /><H1><a name="Clock">Clock</a>
</H1><hr /><P>时钟类，用来获取系统当前的时间。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>now (static)</td><td>返回系统当前时间点。</td></tr></tbody></table><br /><H1><a name="CodeCvt">CodeCvt (template)</a>
</H1><hr /><P>宽窄字符串互相转换的辅助类。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>s2ws</td><td>把窄字符串转换成宽字符串。</td></tr><tr><td>ws2s</td><td>把宽字符串转换成窄字符串。</td></tr><tr><td>current</td><td>取得当前的宽窄字符转换器。</td></tr></tbody></table><br /><H1><a name="Console">Console</a>
</H1><hr /><P>控制台类，可以设置输出的颜色，可以从控制台读取或输出数据。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>SetColor (static)</td><td>设置控制台输出默认颜色。</td></tr><tr><td>Write (static)</td><td>使用默认颜色输出到控制台。</td></tr><tr><td>WriteLine (static)</td><td>使用默认颜色输出到控制台并换行。</td></tr><tr><td>ColoredWrite (static)</td><td>使用指定颜色输出到控制台（不改变默认颜色）。</td></tr><tr><td>ColoredWriteLine (static)</td><td>使用指定颜色输出到控制台并换行（不改变默认颜色）。</td></tr><tr><td>ReadLine (static)</td><td>从控制台读取一行。</td></tr><tr><td>Pause (static)</td><td>暂停，等待用户确认后继续。</td></tr></tbody></table><br /><H1><a name="DataPtrT">DataPtrT (template)</a>
</H1><hr /><P>DataPtrT，T必须是ObjectData的继承类，会管理ObjectData的计数，在计数为0时释放指向内容。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor)</td><td>析构函数。</td></tr><tr><td>reset</td><td>关联其他的指针。</td></tr><tr><td>get</td><td>取得关联的指针。</td></tr><tr><td>swap</td><td>交换与另一智能指针交换内容。</td></tr><tr><td>operator*</td><td>operator*算符，返回指向的内容的引用。</td></tr><tr><td>operator-></td><td>operator->，返回指针。</td></tr></tbody></table><br /><H1><a name="Exception">Exception</a>
</H1><hr /><P>异常类。 一般我们不直接抛出异常，而是采用函数的方式来抛出异常，Exception类里定义了一系列的以X开头的抛出异常的函数。采用函数的方式抛出异常，可较方便统一控制一些行为，如某种行为时写系统的Log信息等的，如果每个地方直接使用throw来抛出异常，则很难统一控制。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor) (virtual)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>XBadAlloc (static)</td><td>抛出内存不足的异常。 </td></tr><tr><td>XError (static)</td><td>抛出异常。</td></tr><tr><td>XInvalidArgument (static)</td><td>抛出无效的参数异常。</td></tr><tr><td>XInvalidIndex (static)</td><td>抛出无效的Index异常。</td></tr><tr><td>XNotFound (static)</td><td>抛出未找到异常。</td></tr><tr><td>XBadFactor (static)</td><td>抛出无效的Factor异常。</td></tr></tbody></table><br /><H1><a name="Factor">Factor</a>
</H1><hr /><P>仿函数，可用来绑定各种函数及函数的参数。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>operator()</td><td>调用Factor绑定的函数，如果Factor为空，则抛出异常。</td></tr><tr><td>reset</td><td>绑定指定函数。</td></tr></tbody></table><br /><H1><a name="LitePtrT">LitePtrT (template)</a>
</H1><hr /><P>LitePtrT，跟T*类似，但能保证初始化为NULL。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor)</td><td>析构函数。</td></tr><tr><td>reset</td><td>关联其他的指针。</td></tr><tr><td>get</td><td>取得关联的指针。</td></tr><tr><td>swap</td><td>交换与另一智能指针交换内容。</td></tr><tr><td>operator*</td><td>operator*算符，返回指向的内容的引用。</td></tr><tr><td>operator-></td><td>operator->，返回指针。</td></tr></tbody></table><br /><H1><a name="NonCopyable">NonCopyable</a>
</H1><hr /><P>阻止继承类被拷贝或赋值。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody></tbody></table><br /><H1><a name="Object">Object</a>
</H1><hr /><P>Object类，是库中的很多类的公共基类，带有一个类信息，定义了系列化相关的虚函数。如果一个类，具有继承关系并希望被系列化，那么，这个类就必须从Object继承。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor) (virtual)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>GetObjectInfo (virtual)</td><td>取得关联的类信息。</td></tr><tr><td>GetObjectName (virtual)</td><td>取得类名称。</td></tr><tr><td>serialize (virtual)</td><td>系列化虚方法，用于指定如何系列化当前类。</td></tr></tbody></table><br /><H1><a name="ObjectCreator">ObjectCreator</a>
</H1><hr /><P>用于使用类名创建类实例。Object继承类，如果定义了关联的ObjectInfo，那么，在关联的ObjectInfo构造时，会自动注册到ObjectCreator中。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>Create</td><td>根据类名称创建类实例。</td></tr><tr><td>Register</td><td>注册类信息。</td></tr><tr><td>GetInfo</td><td>根据类名取得类信息。</td></tr><tr><td>current (static)</td><td>取得当前的ObjectCreator实例。</td></tr></tbody></table><br /><H1><a name="ObjectData">ObjectData</a>
</H1><hr /><P>自带计算数的Object继承类，在计数器值为0时，释放对象，ObjectData类及其继承类，一般只在堆空间分配，一般以指针或智能指针的形式使用。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor) (virtual)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>IncRef</td><td>增加计数。</td></tr><tr><td>DecRef</td><td>减少计数，当计数由1减为0时，会删除当前对象。</td></tr><tr><td>GetRef</td><td>取得当前计数值。</td></tr></tbody></table><br /><H1><a name="ObjectInfo">ObjectInfo</a>
</H1><hr /><P>类信息，用于详细描述类的信息，并带有创建类实例的方法。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>CreateObject (virtual)</td><td>创建关联类实例。</td></tr><tr><td>GetObjectName (virtual)</td><td>取得类名称。</td></tr></tbody></table><br /><H1><a name="String">String</a>
</H1><hr /><P>字符串类。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(destructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>empty</td><td>测试字符串是否为空。</td></tr><tr><td>size</td><td>取得字符串的大小。</td></tr><tr><td>length</td><td>取得字符串的大小。</td></tr><tr><td>c_str()</td><td>返回const char*的指针。指向的内容不可修改。</td></tr><tr><td>swap</td><td>交换字符串的值。</td></tr><tr><td>operator+=</td><td>添加指定内容到字符串后面。</td></tr><tr><td>Printf</td><td>把指定内容打印到当前字符串，替换原来的内容。</td></tr><tr><td>PrintfV</td><td>把指定内容打印到当前字符串，替换原来的内容。</td></tr><tr><td>Format (static)</td><td>按指定的格式生成字符串并返回。</td></tr><tr><td>FormatV (static)</td><td>按指定的格式生成字符串并返回。</td></tr><tr><td>substr</td><td>取得子字符串。</td></tr></tbody></table><br /><H1><a name="System">System</a>
</H1><hr /><P>系统类，用于获取一些跟系统相关的信息，也用于控制系统级的Log信息输出。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>GetCpuCount (static)</td><td>取得Cpu的核数。</td></tr><tr><td>GetPageSize (static)</td><td>取得内存分页大小。</td></tr><tr><td>GetCacheLineSize (static)</td><td>取得CacheLine大小。</td></tr><tr><td>GetPid (static)</td><td>取得进程ID。</td></tr><tr><td>GetCpuTime (static)</td><td>取得进程的CPU时间。</td></tr><tr><td>LogFile (static)</td><td>设置系统的logfile。</td></tr><tr><td>LogTrace (static)</td><td>一般的跟踪信息，写入到系统的logfile。</td></tr><tr><td>LogFetal (static)</td><td>严重错误，一般不可恢复，写入到系统的logfile。</td></tr><tr><td>DebugBreak (static)</td><td>跳转到调试器，如果有的话。</td></tr><tr><td>Exit (static)</td><td>立即退出进程。</td></tr></tbody></table><br /><H1><a name="TimeDetail">TimeDetail</a>
</H1><hr /><P>时间细节类，用于比较简单的方式来表示时间，可以直接取得年份月份等，或转换成字符串等。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>GetYear</td><td>取得年份。</td></tr><tr><td>GetMonth</td><td>取得月份。</td></tr><tr><td>GetDay</td><td>取得（月份中的）天。</td></tr><tr><td>GetHour</td><td>取时小时数。</td></tr><tr><td>GetMinute</td><td>取得分钟数。</td></tr><tr><td>GetSecond</td><td>取得秒。</td></tr><tr><td>GetMilliSecond</td><td>取得毫秒。</td></tr><tr><td>Format</td><td>把时间细节按指定格式转换成字符串。</td></tr><tr><td>Parse</td><td>把字符串转换成时间细节。</td></tr><tr><td>GetTimePoint</td><td>取得时间细节对应的时间点。</td></tr><tr><td>GetTm</td><td>取得struct tm。</td></tr></tbody></table><br /><H1><a name="TimePoint">TimePoint</a>
</H1><hr /><P>TimePoint表示一个时间点，可以精确到微秒。 相当于一全time_t和一个微秒的偏移。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>Format</td><td>把时间点按指定格式转换成字符串。</td></tr><tr><td>GetTime</td><td>取得time_t。</td></tr><tr><td>operator+=</td><td>增加一个时间间隔。</td></tr></tbody></table><br /><H1><a name="TimeSpan">TimeSpan</a>
</H1><hr /><P>TimeSpan用于表示一个时间间隔，可以精确到微秒。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>operator=</td><td>赋值函数。</td></tr><tr><td>GetSeconds</td><td>时间间隔换算成秒并取整。</td></tr><tr><td>GetMilliSeconds</td><td>时间间隔换算成毫秒并取整。</td></tr><tr><td>GetMicroSeconds</td><td>时间间隔换算微成秒并取整。</td></tr><tr><td>Day (static)</td><td>构造一个以天为单位的时间间隔。</td></tr><tr><td>Hours (static)</td><td>构造一个以小时为单位的时间间隔。</td></tr><tr><td>Minutes (static)</td><td>构造一个以分钟为单位的时间间隔。</td></tr><tr><td>Seconds (static)</td><td>构造一个以秒为单位的时间间隔。</td></tr><tr><td>MilliSeconds (static)</td><td>构造一个以毫秒为单位的时间间隔。</td></tr><tr><td>MicroSeconds (static)</td><td>构造一个以微秒为单位的时间间隔。</td></tr></tbody></table><br /></div></body></html>