<html><head><title>serialization</title><link rel="Stylesheet" type="text/css" href="DocStyle.css" /></head><body><div><H1><a name="Serializer">Serializer</a>
</H1><hr /><P>系列化器。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor) (virtual)</td><td>析构函数。</td></tr><tr><td>is_reader</td><td>判断当前系统化器是否是Reader。</td></tr><tr><td>is_writer</td><td>判断当前系统化器是否是Writer。</td></tr><tr><td>good (virtual)</td><td>判断当前系统化器是否没有错误。</td></tr><tr><td>tag (virtual)</td><td>写一个标识，或读取一个标识并对比，用于确定文件格式相符。</td></tr><tr><td>local_version (virtual)</td><td>保存或读取并比较局部的版本号。一般在类系列化函数开始时使用，初始版本为0，如果以后修改了类，如增加了一个成员而这个成员需要系列化，那么，这时我们会增加局部版本号，对读系列化器来说，在读入版本号后，如果不是当前版本，则说明是历史版本，即不存在这个新成员，那么，系列化时就应当跳过这个旧版本没有的成员，并根据具体情况给这个新成员赋一个合适的值。</td></tr><tr><td>global_version</td><td>设置或取得全局的版本号。系列化函数中，可以根据这个全局的版本号，来控制一些细节。</td></tr><tr><td>errstr (virtual)</td><td>系列化器碰到错误，由于这种错误一般无法恢复，此函数的默认实现是抛出异常。</td></tr><tr><td>close (virtual)</td><td>关闭系列化器。</td></tr></tbody></table><br /><H1><a name="SerializerReader">SerializerReader</a>
</H1><hr /><P>读系列化器。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>recv (virtual)</td><td>从系列化器读取内容。</td></tr></tbody></table><br /><H1><a name="SerializerReaderSocket">SerializerReaderSocket</a>
</H1><hr /><P>使用Socket的读系列化器。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>sync</td><td>从Socket读取内容并存到缓冲。</td></tr><tr><td>test</td><td>测试是否有新的数据。</td></tr></tbody></table><br /><H1><a name="SerializerReaderStream">SerializerReaderStream</a>
</H1><hr /><P>使用std::istream的读系列化器。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr></tbody></table><br /><H1><a name="SerializerWriter">SerializerWriter</a>
</H1><hr /><P>写系列化器。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>send (virtual)</td><td>把内容写到系列化器。</td></tr></tbody></table><br /><H1><a name="SerializerWriterSocket">SerializerWriterSocket</a>
</H1><hr /><P>使用Socket的写系列化器。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr><tr><td>sync</td><td>把缓冲内容写到Socket并清空缓存。</td></tr><tr><td>skip</td><td>放弃缓冲的所有内容。</td></tr></tbody></table><br /><H1><a name="SerializerWriterStream">SerializerWriterStream</a>
</H1><hr /><P>使用std::ostream的写系列化器。</P><table><thead><tr><td class=col_name>Member Function Name</td><td class=col_desc>Desc</td></tr></thead><tbody><tr><td>(constructor)</td><td>构造函数。</td></tr><tr><td>(detructor)</td><td>析构函数。</td></tr></tbody></table><br /></div></body></html>